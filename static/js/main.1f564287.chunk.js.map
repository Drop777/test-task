{"version":3,"sources":["Components/Users/Users.js","store/index.js","Components/Users/index.js","Components/Posts/Posts.js","Components/Posts/index.js","Components/Details/Details.js","Components/Details/index.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Users","load","a","getUsersData","props","this","users","isLoading","isLoaded","className","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","user","key","name","component","scope","username","email","address","city","to","id","style","color","textDecoration","Button","variant","React","Component","ACTION_TYPES","BASE_URL","startLoading","type","handleError","dispatch","fetch","then","response","json","data","payload","catch","getUsersPosts","userId","posts","handleSeccessPosts","getPostDetails","postId","initialState","localStorage","JSON","parse","comments","hasError","store","createStore","state","action","applyMiddleware","thunk","subscribe","stringify","getState","connectedUsers","connect","Posts","setOpen","postTitle","postBody","loadPosts","postNewPost","newPost","postUserPost","handleOpen","setState","handleClose","handleChangeTitle","value","target","handleChangeBody","handleSubmit","event","preventDefault","match","parseInt","params","title","body","post","onClick","Modal","aria-labelledby","aria-describedby","open","onClose","onSubmit","TextField","onChange","label","margin","fullWidth","InputLabelProps","shrink","multiline","marginRight","connectedPosts","method","headers","alert","status","Details","editTitle","editBody","loadDetails","putEditedPost","editedPost","putUserPost","deleteUserPost","currentPost","handleEditTitle","handleEditBody","find","Typography","comment","connectedDetails","editPost","App","path","render","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f564287.chunk.js","sourcesContent":["/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable consistent-return */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\n\nclass Users extends React.Component {\n  componentDidMount() {\n    this.load();\n  }\n\n    load = async () => {\n      const { getUsersData } = this.props;\n      await getUsersData();\n    }\n\n    render() {\n      const { users, isLoading, isLoaded } = this.props;\n      if (isLoading) {\n        return (\n          <div className=\"lds-hourglass\" />\n        );\n      }\n\n      if (isLoaded) {\n        return (\n          <Paper>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Name</TableCell>\n                  <TableCell align=\"left\">Csername</TableCell>\n                  <TableCell align=\"left\">Email</TableCell>\n                  <TableCell align=\"left\">City</TableCell>\n                  <TableCell align=\"left\" />\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {users.map((user) => (\n                  <TableRow key={user.name}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {user.name}\n                    </TableCell>\n                    <TableCell align=\"left\">{user.username}</TableCell>\n                    <TableCell align=\"left\">{user.email}</TableCell>\n                    <TableCell align=\"left\">{user.address.city}</TableCell>\n                    <TableCell align=\"left\"><Link to={`/users/${user.id}/posts`} style={{ color: 'black', textDecoration: 'none' }}><Button variant=\"contained\">Posts</Button></Link></TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Paper>\n        );\n      }\n    }\n}\n\nUsers.propTypes = {\n  getUsersData: PropTypes.func,\n  users: PropTypes.arrayOf(PropTypes.object),\n  isLoading: PropTypes.bool,\n  isLoaded: PropTypes.bool,\n}.isRequaired;\n\nexport default Users;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst ACTION_TYPES = {\n  START_LOADING: 'START_LOADING',\n  HANDLE_SECCESS_USERS: 'HANDLE_SECCESS_USERS',\n  HANDLE_ERROR: 'HANDLE_ERROR',\n  HANDLE_SECCESS_POSTS: 'HANDLE_SECCESS_POSTS',\n  HANDLE_SECCESS_DETAILS: 'HANDLE_SECCESS_DETAILS',\n};\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst startLoading = () => ({\n  type: ACTION_TYPES.START_LOADING,\n});\n\nconst handleSeccessUsers = (users) => ({\n  type: ACTION_TYPES.HANDLE_SECCESS_USERS,\n  payload: users,\n});\n\nconst handleSeccessPosts = (posts, userId) => ({\n  type: ACTION_TYPES.HANDLE_SECCESS_POSTS,\n  payload: {\n    posts,\n    userId,\n  },\n});\n\nconst handleSeccessDetails = (comments) => ({\n  type: ACTION_TYPES.HANDLE_SECCESS_DETAILS,\n  payload: comments,\n});\n\nconst handleError = () => ({\n  type: ACTION_TYPES.HANDLE_ERROR,\n});\n\n\nexport const getUsersData = () => (dispatch) => {\n  dispatch(startLoading());\n\n  return (\n    fetch(`${BASE_URL}users`)\n      .then((response) => response.json())\n      .then((data) => dispatch(handleSeccessUsers(data)))\n      .catch(() => dispatch(handleError()))\n  );\n};\n\nexport const getUsersPosts = (userId) => (dispatch) => {\n  dispatch(startLoading());\n\n  return (\n    fetch(`${BASE_URL}posts?userId=${userId}`)\n      .then((response) => response.json())\n      .then((data) => dispatch(handleSeccessPosts(data, userId)))\n      .catch(() => dispatch(handleError()))\n  );\n};\n\nexport const getPostDetails = (postId) => (dispatch) => {\n  dispatch(startLoading());\n  return (\n    fetch(`${BASE_URL}comments/?postId=${postId}`)\n      .then((response) => response.json())\n      .then((data) => dispatch(handleSeccessDetails(data)))\n      .catch(() => dispatch(handleError()))\n  );\n};\n\nexport const postUserPost = (newPost) => (dispatch) => fetch(`${BASE_URL}posts`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify({ ...newPost }),\n})\n  .then((response) => alert(`Status code: ${response.status}`));\n\nexport const putUserPost = (editPost, postId) => (dispatch) => fetch(`${BASE_URL}posts/${postId}`, {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify({ ...editPost }),\n})\n  .then((response) => alert(`Status code: ${response.status}`));\n\nexport const deleteUserPost = (postId) => (dispatch) => fetch(`${BASE_URL}posts/${postId}`, {\n  method: 'DELETE',\n})\n  .then((response) => alert(`Status code: ${response.status}`));\n\nconst initialState = localStorage['redux-store']\n  ? JSON.parse(localStorage['redux-store'])\n  : {\n    users: [],\n    posts: [],\n    comments: [],\n    userId: null,\n    isLoading: true,\n    isLoaded: false,\n    hasError: false,\n  };\n\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ACTION_TYPES.START_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case ACTION_TYPES.HANDLE_SECCESS_USERS:\n      return {\n        ...state,\n        hasError: false,\n        isLoaded: true,\n        isLoading: false,\n        users: [...action.payload],\n      };\n    case ACTION_TYPES.HANDLE_SECCESS_POSTS:\n      return {\n        ...state,\n        hasError: false,\n        isLoaded: true,\n        isLoading: false,\n        posts: [...action.payload.posts],\n        userId: action.payload.userId,\n      };\n    case ACTION_TYPES.HANDLE_SECCESS_DETAILS:\n      return {\n        ...state,\n        hasError: false,\n        isLoaded: true,\n        isLoading: false,\n        comments: [...action.payload],\n      };\n    case ACTION_TYPES.HANDLE_ERROR:\n      return {\n        ...state,\n        isLoading: false,\n        hasError: true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer, applyMiddleware(thunk));\n\nstore.subscribe(() => {\n  localStorage['redux-store'] = JSON.stringify(store.getState());\n});\n","/* eslint-disable import/prefer-default-export */\nimport { connect } from 'react-redux';\nimport Users from './Users';\nimport { getUsersData } from '../../store/index';\n\nconst mapMethodsToProps = (dispatch) => ({\n  getUsersData: () => dispatch(getUsersData()),\n});\n\nconst mapStateToProps = (state) => ({\n  users: state.users,\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n});\n\nconst connectedUsers = connect(mapStateToProps, mapMethodsToProps)(Users);\n\nexport {\n  connectedUsers as Users,\n};\n","/* eslint-disable react/jsx-filename-extension */\n/* eslint-disable consistent-return */\n/* eslint-disable react/state-in-constructor */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\n\nclass Posts extends React.Component {\n  state = {\n    setOpen: false,\n    postTitle: '',\n    postBody: '',\n  }\n\n  componentDidMount() {\n    const { match } = this.props;\n    this.loadPosts(match.match.params.userId);\n  }\n\n  loadPosts = async (userId) => {\n    const { getUsersPosts } = this.props;\n    await getUsersPosts(userId);\n  };\n\n  postNewPost = async (newPost) => {\n    const { postUserPost } = this.props;\n    await postUserPost(newPost);\n  }\n\n  handleOpen = () => {\n    this.setState({\n      setOpen: true,\n    });\n  };\n\n  handleClose = () => {\n    this.setState({\n      setOpen: false,\n    });\n  };\n\n  handleChangeTitle = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      postTitle: value,\n    });\n  };\n\n  handleChangeBody = ({ target }) => {\n    const { value } = target;\n\n    this.setState({\n      postBody: value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { match } = this.props;\n    const { postTitle, postBody } = this.state;\n\n    const newPost = {\n      userId: parseInt(match.match.params.userId, 10),\n      title: postTitle,\n      body: postBody,\n    };\n\n    this.setState({\n      postTitle: '',\n      postBody: '',\n    });\n\n    this.handleClose();\n\n    return this.postNewPost(newPost);\n  }\n\n  render() {\n    const {\n      posts, isLoading, isLoaded, userId,\n    } = this.props;\n    const { setOpen, postTitle, postBody } = this.state;\n    if (isLoading) {\n      return (\n        <div className=\"lds-hourglass\" />\n      );\n    }\n    if (isLoaded) {\n      return (\n        <>\n          <Paper>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Title</TableCell>\n                  <TableCell align=\"left\">Body</TableCell>\n                  <TableCell align=\"left\">ID</TableCell>\n                  <TableCell />\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {posts.map((post) => (\n                  <TableRow key={post.id}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {post.title}\n                    </TableCell>\n                    <TableCell align=\"left\">{post.body}</TableCell>\n                    <TableCell align=\"left\">{post.id}</TableCell>\n                    <TableCell><Link to={`/users/${userId}/posts/${post.id}/details`} style={{ color: 'black', textDecoration: 'none' }}><Button variant=\"contained\">Details</Button></Link></TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </Paper>\n          <div className=\"container\">\n            <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.handleOpen}>Add new post</Button>\n            <Modal\n              aria-labelledby=\"simple-modal-title\"\n              aria-describedby=\"simple-modal-description\"\n              open={setOpen}\n              onClose={this.handleClose}\n            >\n              <div className=\"pop-up\">\n                <h2 id=\"simple-modal-title\">Add new post</h2>\n                <form onSubmit={this.handleSubmit}>\n                  <TextField\n                    onChange={this.handleChangeTitle}\n                    id=\"outlined-full-width\"\n                    label=\"Title\"\n                    value={postTitle}\n                    style={{ margin: 8 }}\n                    fullWidth\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                  <TextField\n                    onChange={this.handleChangeBody}\n                    id=\"outlined-full-width\"\n                    label=\"Body\"\n                    value={postBody}\n                    style={{ margin: 8 }}\n                    fullWidth\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    multiline\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                  />\n                  <div className=\"pop-up-buttons\">\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ marginRight: 15 }}>Add</Button>\n                    <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.handleClose}>Cancel</Button>\n                  </div>\n                </form>\n              </div>\n            </Modal>\n          </div>\n        </>\n      );\n    }\n  }\n}\n\nPosts.propTypes = {\n  match: PropTypes.object,\n  getUsersPosts: PropTypes.func,\n  postUserPost: PropTypes.func,\n  posts: PropTypes.arrayOf(PropTypes.object),\n  isLoading: PropTypes.bool,\n  isLoaded: PropTypes.bool,\n  userId: PropTypes.string,\n}.isRequaired;\n\nexport default Posts;\n","/* eslint-disable import/prefer-default-export */\nimport { connect } from 'react-redux';\nimport Posts from './Posts';\nimport { getUsersPosts, postUserPost } from '../../store/index';\n\nconst mapMethodsToProps = (dispatch) => ({\n  getUsersPosts: (userId) => dispatch(getUsersPosts(userId)),\n  postUserPost: (newPost) => dispatch(postUserPost(newPost)),\n});\n\nconst marStateToProps = (state) => ({\n  posts: state.posts,\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n  userId: state.userId,\n});\n\nconst connectedPosts = connect(marStateToProps, mapMethodsToProps)(Posts);\n\nexport {\n  connectedPosts as Posts,\n};\n","/* eslint-disable react/state-in-constructor */\n/* eslint-disable consistent-return */\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport './Details.css';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Modal from '@material-ui/core/Modal';\nimport TextField from '@material-ui/core/TextField';\n\nclass Details extends React.Component {\n    state = {\n      setOpen: false,\n      editTitle: '',\n      editBody: '',\n    }\n\n    componentDidMount() {\n      const { match } = this.props;\n      this.loadDetails(match.match.params.postId);\n    }\n\n    loadDetails = async (postId) => {\n      const { getPostDetails } = this.props;\n      await getPostDetails(postId);\n    }\n\n    putEditedPost = async (editedPost, postId) => {\n      const { putUserPost } = this.props;\n      await putUserPost(editedPost, postId);\n    }\n\n    deleteUserPost = async (postId) => {\n      const { deleteUserPost } = this.props;\n      await deleteUserPost(postId);\n    }\n\n    handleOpen = (currentPost) => {\n      this.setState({\n        editTitle: currentPost.title,\n        editBody: currentPost.body,\n        setOpen: true,\n      });\n    };\n\n    handleClose = () => {\n      this.setState({\n        setOpen: false,\n      });\n    };\n\n    handleEditTitle = ({ target }) => {\n      const { value } = target;\n\n      this.setState({\n        editTitle: value,\n      });\n    };\n\n    handleEditBody = ({ target }) => {\n      const { value } = target;\n\n      this.setState({\n        editBody: value,\n      });\n    };\n\n    handleSubmit = (currentPost) => {\n      const { editTitle, editBody } = this.state;\n      const editedPost = {\n        id: currentPost.id,\n        title: editTitle,\n        body: editBody,\n        userId: currentPost.userId,\n      };\n      this.handleClose();\n      return this.putEditedPost(editedPost, currentPost.id);\n    };\n\n    render() {\n      const {\n        match, posts, comments, isLoading, isLoaded,\n      } = this.props;\n      const { editTitle, editBody, setOpen } = this.state;\n      const currentPost = posts.find((post) => post.id === parseInt(match.match.params.postId, 10));\n      if (isLoading) {\n        return (\n          <div className=\"lds-hourglass\" />\n        );\n      }\n      if (isLoaded) {\n        return (\n          <>\n            <Paper>\n              <Typography variant=\"h5\" component=\"h3\">\n              Title:\n                {currentPost.title}\n              </Typography>\n              <Typography component=\"p\">\n                Body:\n                {currentPost.body}\n              </Typography>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Name</TableCell>\n                    <TableCell align=\"left\">Email</TableCell>\n                    <TableCell align=\"left\">Comment</TableCell>\n                    <TableCell align=\"left\">ID</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {comments.map((comment) => (\n                    <TableRow key={comment.id}>\n                      <TableCell component=\"th\" scope=\"row\">\n                        {comment.name}\n                      </TableCell>\n                      <TableCell align=\"left\">{comment.email}</TableCell>\n                      <TableCell align=\"left\">{comment.body}</TableCell>\n                      <TableCell align=\"left\">{comment.id}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </Paper>\n            <div className=\"container\">\n              <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={() => this.handleOpen(currentPost)}>Edit post</Button>\n              <Modal\n                aria-labelledby=\"simple-modal-title\"\n                aria-describedby=\"simple-modal-description\"\n                open={setOpen}\n                onClose={this.handleClose}\n              >\n                <div className=\"pop-up\">\n                  <h2 id=\"simple-modal-title\">Edit post</h2>\n                  <form onSubmit={() => this.handleSubmit(currentPost)}>\n                    <TextField\n                      onChange={this.handleEditTitle}\n                      id=\"outlined-full-width\"\n                      label=\"Title\"\n                      value={editTitle}\n                      style={{ margin: 8 }}\n                      fullWidth\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                    />\n                    <TextField\n                      onChange={this.handleEditBody}\n                      id=\"outlined-full-width\"\n                      label=\"Body\"\n                      value={editBody}\n                      style={{ margin: 8 }}\n                      fullWidth\n                      margin=\"normal\"\n                      variant=\"outlined\"\n                      multiline\n                      InputLabelProps={{\n                        shrink: true,\n                      }}\n                    />\n                    <div className=\"pop-up-buttons\">\n                      <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ marginRight: 15 }}>Add</Button>\n                      <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={this.handleClose}>Cancel</Button>\n                    </div>\n                  </form>\n                </div>\n              </Modal>\n              <Button type=\"button\" variant=\"contained\" color=\"primary\" onClick={() => this.deleteUserPost(currentPost.id)}>Delete</Button>\n            </div>\n          </>\n        );\n      }\n    }\n}\n\nDetails.propTypes = {\n  match: PropTypes.object,\n  getPostDetails: PropTypes.func,\n  putUserPost: PropTypes.func,\n  deleteUserPost: PropTypes.func,\n  comments: PropTypes.arrayOf(PropTypes.object),\n  posts: PropTypes.arrayOf(PropTypes.object),\n  isLoading: PropTypes.bool,\n  isLoaded: PropTypes.bool,\n}.isRequaired;\n\nexport default Details;\n","/* eslint-disable import/prefer-default-export */\nimport { connect } from 'react-redux';\nimport Details from './Details';\nimport { getPostDetails, putUserPost, deleteUserPost } from '../../store/index';\n\nconst mapMethodsToProps = (dispatch) => ({\n  getPostDetails: (postId) => dispatch(getPostDetails(postId)),\n  putUserPost: (editedPost, postId) => dispatch(putUserPost(editedPost, postId)),\n  deleteUserPost: (postId) => dispatch(deleteUserPost(postId)),\n});\n\nconst marStateToProps = (state) => ({\n  posts: state.posts,\n  comments: state.comments,\n  isLoading: state.isLoading,\n  isLoaded: state.isLoaded,\n});\n\nconst connectedDetails = connect(marStateToProps, mapMethodsToProps)(Details);\n\nexport {\n  connectedDetails as Details,\n};\n","/* eslint-disable react/prefer-stateless-function */\n/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { Users } from '../Users/index';\nimport { Posts } from '../Posts/index';\nimport { Details } from '../Details/index';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route path=\"/users/:userId?/posts/:postId?/details\" render={(match) => <Details match={match} />} />\n          <Route path=\"/users/:userId?/posts\" render={(match) => <Posts match={match} />} />\n          <Route path=\"/\" component={Users} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable react/jsx-filename-extension */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './Components/App/App';\nimport { store } from './store/index';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}